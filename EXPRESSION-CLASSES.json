{
	"http://ns.nuke24.net/TOGVM/Expression/LiteralString": {
		"properties": {
			"literalValue": {
				"longName": "http://ns.nuke24.net/TOGVM/Expression/literalValue"
			}
		}
	},
	"http://ns.nuke24.net/TOGVM/Expression/LiteralInteger": {
		"properties": {
			"literalValue": {
				"longName": "http://ns.nuke24.net/TOGVM/Expression/literalValue"
			}
		}
	},
	"http://ns.nuke24.net/TOGVM/Expression/LiteralNumber": {
		"properties": {
			"literalValue": {
				"longName": "http://ns.nuke24.net/TOGVM/Expression/literalValue"
			}
		}
	},
	"http://ns.nuke24.net/TOGVM/Expression/LiteralBoolean": {
		"properties": {
			"literalValue": {
				"longName": "http://ns.nuke24.net/TOGVM/Expression/literalValue"
			}
		}
	},
	"http://ns.nuke24.net/TOGVM/Expression/LiteralRDFObject": {
		"properties": {
			"literalValue": {}
		},
		"notes": [
			"Evaluates to the abstract concept described by the literal value.",
			"Since TOGVM expressions are themselves defined as RDF objects, other literal values can be embedded directly.",
			"i.e. there is no additional 'serialization'.",
			"If you cannot embed the object directly",
			"(e.g. because the expression is encoded in some format that doesn't have a way to represent arbitrary RDF objects)",
			"To represent the result of parsing a serialized RDF object, use a FunctionApplication of http://ns.nuke24.net/TOGVM/Functions/ParseRDFObject."
		]
	},
	"http://ns.nuke24.net/TOGVM/Expression/Variable": {
		"properties": {
			"variableName": {
				"longName": "http://ns.nuke24.net/TOGVM/Expression/variableName",
				"notes": ["Some string identifying the variable"]
			}
		},
		"notes": [
			"Evaluates to the value of a variable.",
			"Resolution semantics depend on the variable's scope.",
			"For variables with URI-like identifiers, can use that identifier as the variable object's URI (rdf:about in RDF+XMLese)."
		]
	},
	"http://ns.nuke24.net/TOGVM/Expression/Let": {
		"properties": {
			"variableValueExpressions": {
				"notes": [
					"A collection of NamedValues, one per value to be initialized.",
					"The value expressions are to be evaluated in the outer context,",
					"which means the variable initialization expressions cannot reference",
					"other variables being initialized by the same Let."
				]
			},
			"body": {
				"notes": [
					"An expression to evaluate in the context of the new variables."
				]
			}
		},
		"notes": [
			"Binds values to variables and then evaluates body.",
			"Each variable value expression is evaluated exactly once."
		]
	},
	"http://ns.nuke24.net/TOGVM/Expression/DataInterpretation": {
		"properties": {
			"dataExpression": {
				"notes": [
					"An expression that resolves to the data (usually a string or byte sequence) to be interpreted"
				]
			},
			"datatypeRef": {
				"notes": [
					"URI of the datatype, which indicates how to interpret the 'data' argument as a value.",
				]
			},
			"fragmentId": {
				"notes": [
					"A name whose meaning depends on the source format,",
					"indicating which object from the source we are referring to.",
					"In an RDF document, this might be the node ID.",
					"If fragmentId is empty string or not present (these cases should be treated as equivalent),"
					"the 'root' object is being referred to."
				]
			}
		},
		"notes": [
			"Evaluates, if possible, to the value represented by `data`, interpreted according to the indicated `datatype`.",
			"e.g. data=\"123.4\" and datatypeRef=\"http://www.w3.org/2001/XMLSchema#decimal\", the value is the number 123.4",
			"Note that this is somewhat more flexible than the 'rdf:datatype' concept, as this can apply not only to literals,",
			"but to any expression, and the 'lexical space' is not limited to character strings",
			"(though it is probably best if limited to character strings and byte arrays).",
			"",
			"Useful in cases where it is more convenient to refer to the serialized form,",
			"or where the conceptual value is entirely conceptual",
			"(in which case the expression will never actually be evaluated, but passed around as a 'lazy' representation of the value).",
			"In fact the main motivator of having this as an expression type, rather than a function,",
			"is for use in contexts where values are represented as constant [simplified] TOGVM expressions."
		]
	},
	"http://ns.nuke24.net/TOGVM/Expression/FunctionApplication": {
		"properties": {
			"functionExpression": {
				"notes": ["An expression returning the function!"]
			},
			"function": {
				"notes": [
					"The function.  Probably a reference.  <function rdf:resource=\"...\"/> in RDF+XMLese."
				]
			},
			"functionRef": {
				"notes": [
					"Alternate way to specify function by URI, e.g. in JSON."
				]
			},
			"argumentExpressions": {
				"notes": [
					"A list of argument expressions which will each evaluate to the corresponding argument value.",
					"NamedValue and Splat expressions have special meaning as function arguments."
				]
			},
			"arguments": {
				"notes": [
					"Deprecated name for argumentExpressions"
				]
			},
			"argumentsExpression": {
				"notes": [
					"An expression that returns an object representing the entire arguments list."
				]
			}
		},
		"notes": [
			"Apply a function with the given arguments.",
			"",
			"Although functions can return multiple values, the result of FunctionApplication is the first positional return value,",
			"or a Void value if there were no return values.",
			"Some to-be-defined mechanism should be used to apply a function and take the entire Arguments return object.",
			"",
			"Also acts as [multidimensional] array indexing operator!"
		]
	},
	"http://ns.nuke24.net/TOGVM/Expression/ArrayConstruction": {
		"properties": {
			"valueExpressions": {
				"notes": [
					"An array of expressions which will each evaluate to the corresponding array element value."
				]
			}
		}
	},
	"http://ns.nuke24.net/TOGVM/Expression/AssociativeArrayConstruction": {
		"properties": {
			"pairExpressions": {
				"notes": [
					"An array of alternating key/value expressions and/or Splat expressions.",
					"It does not make sense to use a splat expression following a key."
				]
			}
		}
	},
	"http://ns.nuke24.net/TOGVM/Expression/Splat": {
		"properties": {
			"splattedValueExpression": {
				"notes": [ "The expression whose value is to be interpolated" ]
			}
		},
		"notes": [
			"Only makes sense as an expression in a list constructor or function arguments.",
			"Indicates that each element of the returned list should be its own entry in the resulting list.",
			"Associatve arrays may be splatted when appropriate."
		]
	},
	"http://ns.nuke24.net/TOGVM/Expression/NamedValue": {
		"properties": {
			"name": {
				 "notes": [ "The name, a string" ]
			},
			"nameExpression": {
				 "notes": [ "An expression that evaluates to the name" ]
			},
			"valueExpression": {
				"notes": [ "An expression that evaluates to the argument value" ]
			}
		},
		"notes": [
			"A 'named value' doesn't represent a value per se, but provides context (the name)",
			"that is only meaningful in certain contexts, such as function arguments or variableValueExpression lists.",
			"Using a NamedValue elsewhere is an error.",
			"Either 'name' or 'nameExpression' must be specified"
		]
	},
	"http://ns.nuke24.net/TOGVM/Expression/NamedArgument": {
		 "deprecated": true,
		 "notes": [
			  "Old name (1.0.0) for NamedValue"
		 ]
	},
	"http://ns.nuke24.net/TOGVM/Expression/IfElseChain": {
		"properties": {
			"argumentExpressions": {
				"notes": [
					"A list of alternating condition/result expressions, followed by a final 'otherwise' result expression;",
					"must have an odd number of elements."
				]
			},
			"arguments": {
				"notes": [
					"Deprecated name for argumentExpressions"
				]
			}
		}
	}
}
