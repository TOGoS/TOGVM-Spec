{
	"http://ns.nuke24.net/TOGVM/Expression/LiteralString": {
		"properties": {
			"literalValue": {}
		}
	},
	"http://ns.nuke24.net/TOGVM/Expression/LiteralInteger": {
		"properties": {
			"literalValue": {}
		}
	},
	"http://ns.nuke24.net/TOGVM/Expression/LiteralNumber": {
		"properties": {
			"literalValue": {}
		}
	},
	"http://ns.nuke24.net/TOGVM/Expression/LiteralBoolean": {
		"properties": {
			"literalValue": {}
		}
	},
	"http://ns.nuke24.net/TOGVM/Expression/Variable": {
		"properties": {
			"variableName": {
				"notes": ["Some string identifying the variable"]
			}
		},
		"notes": [
			"Evaluates to the value of a variable.",
			"Resolution semantics depend on the variable's scope.",
			"For variables with URI-like identifiers, can use that identifier as the variable object's URI (rdf:about in RDF+XMLese).",
		]
	},
	"http://ns.nuke24.net/TOGVM/Expression/Let": {
		"properties": {
			"variableValueExpressions": {
				"notes": [
					"A collection of NamedValues, one per value to be initialized.",
					"The value expressions are to be evaluated in the outer context,",
					"which means the variable initialization expressions cannot reference",
					"other variables being initialized by the same Let."
				]
			},
			"body": {
				"notes": [
					"An expression to evaluate in the context of the new variables."
				]
			}
		},
		"notes": [
			"Binds values to variables and then evaluates body.",
			"Each variable value expression is evaluated exactly once."
		]
	},
	"http://ns.nuke24.net/TOGVM/Expression/FunctionApplication": {
		"properties": {
			"functionExpression": {
				"notes": ["An expression returning the function!"]
			},
			"function": {
				"notes": [
					"The function.  Probably a reference.  <function rdf:resource=\"...\"/> in RDF+XMLese."
				],
			},
			"functionRef": {
				"notes": [
					"Alternate way to specify function by URI, e.g. in JSON.",
				]
			},
			"arguments": {
				"notes": [
					"A list of argument expressions which will each evaluate to the corresponding argument value.",
					"NamedValue and Splat expressions have special meaning as function arguments."
				]
			}
		},
		"notes": [
			"Also acts as [multidimensional] array indexing operator!"
		]
	},
	"http://ns.nuke24.net/TOGVM/Expression/ArrayConstruction": {
		"properties": {
			"valueExpressions": {
				"notes": [
					"An array of expressions which will each evaluate to the corresponding array element value."
				]
			}
		}
	},
	"http://ns.nuke24.net/TOGVM/Expression/AssociativeArrayConstruction": {
		"properties": {
			"pairExpressions": {
				"notes": [
					"An array of alternating key/value expressions and/or Splat expressions.",
					"It does not make sense to use a splat expression following a key."
				]
			}
		}
	},
	"http://ns.nuke24.net/TOGVM/Expression/Splat": {
		"properties": {
			"splattedValueExpression": {
				"notes": [ "The expression whose value is to be interpolated" ]
			}
		},
		"notes": [
			"Only makes sense as an expression in a list constructor or function arguments.",
			"Indicates that each element of the returned list should be its own entry in the resulting list.",
			"Associatve arrays may be splatted when appropriate."
		]
	},
	"http://ns.nuke24.net/TOGVM/Expression/NamedValue": {
		"properties": {
			"name": {
				 "notes": [ "The name, a string" ]
			},
			"nameExpression": {
				 "notes": [ "An expression that provides the name" ]
			},
			"valueExpression": {
				"notes": [ "An expression that provides the argument value" ]
			}
		},
		"notes": [
			"Only valid as a function argument.",
			"Either 'name' or 'nameExpression' must be specified."
		]
	},
	"http://ns.nuke24.net/TOGVM/Expression/NamedArgument": {
		 "deprecated": true,
		 "notes": [
			  "Old name (1.0.0) for NamedValue"
		 ],
	},
	"http://ns.nuke24.net/TOGVM/Expression/IfElseChain": {
		"properties": {
			"arguments": {
				"notes": ["A list of alternating condition/result expressions, followed by a final 'otherwise' result expression"]
			}
		}
	}
}
