Functional language with Haskell-like actions

Thoughts...

  A URL is an expression that represents to the resource it names,
  probably implemented as something like NamedResource : struct { field 'URI' : type @ URI }.

  \{...} for string interpolation
  Unicode <>, <<>> chars for easier nested strings
  
  Need a reference implementation, probaly in PHP
  (because it's what I work with the most, not because it's a good language).
  
  Have a Forth-like dialect that uses the same tokenizer and VM.

  See VM.txt for VM notes.

Tokens

  Most non-quote, non-brace characters are allowed as bareword parts
  (so that most URLs valid barewords)
  
  Backslash escape sequences:
  - \\, \', \", \‹, \›, \«, \» (second character represents itself)
  - \a, \b, \f, \n, \r, \t, \v, \uXXXX, \UXXXXXXXX (standard meanings)
  
  Various quotation styles
  (logical type, nestability, escape sequences)
  'single, non-nestable, backslash escapes`
  "double, non-nestable, backslash escapes"
  ‘single, nestable, backslash escapes’
  “double, nestable, backslash escapes”
  ‹single, nestable, no escape sequences›
  «double, nestable, no escape sequences»
  
  Tokenizer directives:
  <?token:qs={single|double|bare}:delimiter=(delimiter)(space or newline)(data bytes)(delimiter)(optional whitespace)?>
  <?token:qs={single|double|bare}:length=(decimal-encoded byte count)(space or newline)(data bytes)(optional whitespace)?>
  
  # Line comments are skipped-over by the tokenizer
  
  Newline characters should be treated as tokens, since they have
  significance in some of the languages I want to support.

Syntax

    x? means x is optional
    x* means zero or more x
    x+ means one or more x
    (x y) is grouping x and y

  <string-literal-char> :=
    <backslash> {<backslash>|<single-quote>|<double-quote>|"r"|"n"|"t"|...} |
    any character other than a quote or backslash
  
  <single-quoted-word> = <single-quote> <string-literal-char>* <single-quote>
  <single-quoted-word> = <single-quote> <string-literal-char>* <single-quote>
  
  <word> := <single-quoted-word> | <bareword>
  
  <phrase> := <word>+
  
  <expression> :=
    <phrase> |
    <expression> <infix-operator> <expression> |
    "(" <expression> ")" |                        # grouping
    <expression> "(" <argument-list> ")" |        # function application
    "{" <statement-list> "}"                      # e.g. for defining structs

Statement syntax:
  
  <argument-list> := (<expression> ("," <expression>)*)?
  
  <statement> := <phrase> (":" <statement-modifier>)* ("{" <statement-list> "}" (<statement>)?)?
    
  <statement-list> := <statement-delimiter>* (<statement> (<statement-delimiter>+ <statement>))* <statement-delimiter>*

General principles

  Single-quoted strings represent the thing named by the thing within, and are treated as a single word.
  Double-quoted strings represent the encoded text.
  The list of infix operators is flexible, but limited to barewords (quoted tokens are never considered infix operators)
  Numeric, boolean literals are just lazily predefined symbols.  References may be quoted.
